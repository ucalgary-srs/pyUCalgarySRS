URLS=[
"pyucalgarysrs/index.html",
"pyucalgarysrs/models/index.html",
"pyucalgarysrs/models/atm/index.html",
"pyucalgarysrs/models/atm/classes_inverse.html",
"pyucalgarysrs/models/atm/classes_forward.html",
"pyucalgarysrs/data/index.html",
"pyucalgarysrs/data/classes.html",
"pyucalgarysrs/data/read/index.html",
"pyucalgarysrs/exceptions.html"
];
INDEX=[
{
"ref":"pyucalgarysrs",
"url":0,
"doc":"The PyUCalgarySRS library provides a way to interact with the UCalgary Space Remote Sensing (SRS) Open Data Platform. It enables users to programmatically download and read data, and utilize the TREx Auroral Transport Model (ATM). This library leverages the UCalgary SRS API for some functions. For more information about the data available and usage examples, visit the [Open Data Platform website](https: data.phys.ucalgary.ca). Installation:   $ pip install pyucalgarysrs   Basic usage:   > import pyucalgarysrs > srs = pyucalgarysrs.PyUCalgarySRS()  "
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS",
"url":0,
"doc":"The  PyUCalgarySRS class is the primary entry point for utilizing this library. It is used to initialize a session, capturing details about API connectivity, environment, and more. All submodules are encapsulated within this class, so any usage of the library starts with creating this object.   import pyucalgarysrs srs = pyucalgarysrs.PyUCalgarySRS()   When working with this object, you can set configuration parameters, such as the destination directory for downloaded data, or API special settings (e.g., timeout, HTTP headers). These parameters can be set when instantiating the object, or after instantiating using the self-contained accessible variables. Attributes: download_output_root_path (str): Destination directory for downloaded data. The default for this path is a subfolder in the user's home directory, such as  /home/user/pyucalgarysrs_data in Linux. In Windows and Mac, it is similar. read_tar_temp_path (str): Temporary directory used for tar extraction phases during file reading (e.g., reading TREx RGB Burst data). The default for this is   /tar_temp_working . For faster performance when reading tar-based data, one option on Linux is to set this to use RAM directly at  /dev/shm/pyucalgarysrs_tar_temp_working . api_base_url (str): URL prefix to use when interacting with the UCalgary Space Remote Sensing API. By default this is set to  https: api.phys.ucalgary.ca . This parameter is primarily used by the development team to test and build new functions using the private staging API. api_timeout (int): The timeout used when communicating with the UCalgary Space Remote Sensing API. This value is represented in seconds, and by default is  30 seconds . api_headers (Dict): HTTP headers used when communicating with the UCalgary Space Remote Sensing API. The default for this value consists of several standard headers. Any changes to this parameter are in addition to the default standard headers. api_key (str): API key to use when interacting with the UCalgary Space Remote Sensing API. The default value is None. Please note that an API key is currently not required for using the API, and this parameter is implemented purely for future-proofing. It is presently not utilized. progress_bar_backend (str): The progress bar backend to use. Valid choices are 'auto', 'standard', or 'notebook'. Default is 'auto'. This parameter is optional. Raises: pyucalgarysrs.exceptions.SRSInitializationError: an error was encountered during initialization of the paths"
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.data",
"url":0,
"doc":"Access to the  data submodule from within a PyUCalgarySRS object."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.models",
"url":0,
"doc":"Access to the  models submodule from within a PyUCalgarySRS object."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.api_base_url",
"url":0,
"doc":"Property for the API base URL. See above for details."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.api_headers",
"url":0,
"doc":"Property for the API headers. See above for details."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.api_timeout",
"url":0,
"doc":"Property for the API timeout. See above for details."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.api_key",
"url":0,
"doc":"Property for the API key. See above for details."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.download_output_root_path",
"url":0,
"doc":"Property for the download output root path. See above for details."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.read_tar_temp_path",
"url":0,
"doc":"Property for the read tar temp path. See above for details."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.progress_bar_backend",
"url":0,
"doc":"Property for the progress bar backend. See above for details."
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.purge_download_output_root_path",
"url":0,
"doc":"Delete all files in the  download_output_root_path directory. Since the library downloads data to this directory, over time it can grow too large and the user can risk running out of space. This method is here to assist with easily clearing out this directory. Raises: pyucalgarysrs.exceptions.SRSPurgeError: an error was encountered during the purge operation",
"func":1
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.purge_read_tar_temp_path",
"url":0,
"doc":"Delete all files in the  read_tar_temp_path directory. Since the library extracts temporary data to this directory, sometime issues during reading can cause this directory to contain residual files that aren't deleted during the normal read routine. Though this is very rare, it is still possible. Therefore, this method is here to assist with easily clearing out this directory. Raises: pyucalgarysrs.exceptions.SRSPurgeError: an error was encountered during the purge operation",
"func":1
},
{
"ref":"pyucalgarysrs.PyUCalgarySRS.show_data_usage",
"url":0,
"doc":"Print the volume of data existing in the download_output_root_path, broken down by dataset. Alternatively return the information in a dictionary. This can be a helpful tool for managing your disk space. Args: order (bool): Order results by either  size or  name . Default is  size . return_dict (bool): Instead of printing the data usage information, return information as a dictionary. Returns: Printed output. If  return_dict is True, then it will instead return a dictionary with the disk usage information. Notes: Note that size on disk may differ slightly from the values determined by this routine. For example, the results here will be slightly different than the output of a 'du' command on  nix systems.",
"func":1
},
{
"ref":"pyucalgarysrs.models",
"url":1,
"doc":"Functions for interacting with UCalgary Space Remote Sensing models. One such model is the TREx Auroral Transport Model (ATM)."
},
{
"ref":"pyucalgarysrs.models.ModelsManager",
"url":1,
"doc":"The ModelsManager object is initialized within every PyUCalgarySRS object. It acts as a way to access the submodules and carry over configuration information in the super class."
},
{
"ref":"pyucalgarysrs.models.ModelsManager.atm",
"url":1,
"doc":"Access to the  atm submodule from within a PyUCalgarySRS object."
},
{
"ref":"pyucalgarysrs.models.atm",
"url":2,
"doc":"Functions for running TREx Auroral Transport Model (ATM) calculations."
},
{
"ref":"pyucalgarysrs.models.atm.ATMManager",
"url":2,
"doc":"The ATMManager object is initialized within every PyUCalgarySRS.models object. It acts as a way to access the submodules and carry over configuration information in the super class."
},
{
"ref":"pyucalgarysrs.models.atm.ATMManager.forward",
"url":2,
"doc":"Perform a forward calculation using the TREx Auroral Transport Model and the supplied input parameters. Note that this function utilizes the UCalgary Space Remote Sensing API to perform the calculation. The ATM model is 1D and time-independent. However, the optional parameters  timescale_auroral and  timescale_transport provide limited support for time-dependent and transport process. The  timescale_auroral parameter (T0) is the duration of the precipitation. The  timescale_transport parameter is defined by L/v0, in which L is the dimension of the auroral structure, and v0 is the cross-structure drift speed. The model quasi-analytically solves the continuity equation under a square input (with time duration T0 and spatial width L) input of precipitation. The initial/boundary conditions are given by IRI. The output yields the mean density/VER over [0-L] at time T0. Args: timestamp (datetime.datetime): Timestamp for the calculation. This value is expected to be in UTC, and is valid for any value up to the end of the previous day. Any timezone data will be ignored. This parameter is required. geodetic_latitude (float): Latitude in geodetic coordinates: -90.0 to 90.0. This parameter is required. geodetic_longitude (float): Longitude in geodetic coordinates: -180.0 to 180.0. This parameter is required. output (ATMForwardOutputFlags): Flags to indicate which values are included in the output. See [ ATMForwardOutputFlags ](classes_forward.html pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags) for more details. This parameter is required. maxwellian_energy_flux (float): Maxwellian energy flux in erg/cm2/s. Default is 10. This parameter is optional. gaussian_energy_flux (float): Gaussian energy flux in erg/cm2/s. Default is 0.0. Note that  gaussian_peak_energy and  gaussian_spectral_width must be specified if the  gaussian_energy_flux is not 0. This parameter is optional. maxwellian_characteristic_energy (float): Maxwellian characteristic energy in eV. Default is 5000. Note that  maxwellian_characteristic_energy must be specified if the  maxwellian_energy_flux is not 0. This parameter is optional. gaussian_peak_energy (float): Gaussian peak energy in eV. Default is 1000. Note this parameter must be specified if the  gaussian_energy_flux is not 0. This parameter is optional. gaussian_spectral_width (float): Gaussian spectral width in eV. Default is 100. Note this parameter must be specified if the  gaussian_energy_flux is not 0. This parameter is optional. nrlmsis_model_version (str): NRLMSIS version number. Possible values are  00 or  2.0 . Default is  2.0 . This parameter is optional. More details about this empirical model can be found [here](https: ccmc.gsfc.nasa.gov/models/NRLMSIS~00/), and [here](https: ccmc.gsfc.nasa.gov/models/NRLMSIS~2.0/). oxygen_correction_factor (float): Oxygen correction factor used to multiply by in the empirical model. Default is 1. This parameter is optional. timescale_auroral (int): The duration of the precipitation, in seconds. Default is 600 (10 minutes). This parameter is optional. timescale_transport (int): Defined by L/v0, in which L is the dimension of the auroral structure, and v0 is the cross-structure drift speed. Represented in seconds. Default is 600 (10 minutes). This parameter is optional. atm_model_version (str): ATM model version number. Possible values are only '1.0' at this time, but will have additional possible values in the future. This parameter is optional. custom_spectrum (ndarray): A 2-dimensional numpy array (dtype is any float type) containing values representing the energy in eV, and flux in 1/cm2/sr/eV. The shape is expected to be [N, 2], with energy in [:, 0] and flux in [:, 1]. Note that this array cannot contain negative values (SRSAPIError will be raised if so). This parameter is optional. no_cache (bool): The UCalgary Space Remote Sensing API utilizes a caching layer for performing ATM calculations. If this variation of input parameters has been run before (and the cache is still valid), then it will not re-run the calculation. Instead it will return the cached results immediately. To disable the caching layer, set this parameter to  True . Default is  False . This parameter is optional. timeout (int): Represents how many seconds to wait for the API to send data before giving up. The default is 30 seconds, or the  api_timeout value in the super class'  pyucalgarysrs.PyUCalgarySRS object. This parameter is optional. Returns: An [ ATMForwardResult ](classes_forward.html pyucalgarysrs.models.atm.classes_forward.ATMForwardResult) object containing the requested output data, among other values. Raises: pyucalgarysrs.exceptions.SRSAPIError: An API error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.models.atm.ATMManager.inverse",
"url":2,
"doc":"Perform an inverse calculation using the TREx Auroral Transport Model and the supplied input parameters. Note that this function utilizes the UCalgary Space Remote Sensing API to perform the calculation. Args: timestamp (datetime.datetime): Timestamp for the calculation. This value is expected to be in UTC, and is valid for a pre-defined timeframe. An error will be raised if outside of the valid timeframe. Any timezone data will be ignored. This parameter is required. geodetic_latitude (float): Latitude in geodetic coordinates. Currently limited to the Transition Region Explorer (TREx) region of >=50.0 and  =-110 and <-70 degrees. An error will be raised if outside of this range. This parameter is required. intensity_4278 (float): Intensity of the 427.8nm (blue) wavelength in Rayleighs. This parameter is required. intensity_5577 (float): Intensity of the 557.7nm (green) wavelength in Rayleighs. This parameter is required. intensity_6300 (float): Intensity of the 630.0nm (red) wavelength in Rayleighs. This parameter is required. intensity_8446 (float): Intensity of the 844.6nm (near infrared) wavelength in Rayleighs. This parameter is required. output (ATMInverseOutputFlags): Flags to indicate which values are included in the output. See [ ATMInverseOutputFlags ](classes_inverse.html pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags) for more details. This parameter is required. precipitation_flux_spectral_type (str): The precipitation flux spectral type to use. Possible values are  gaussian or  maxwellian . The default is  gaussian . This parameter is optional. nrlmsis_model_version (str): NRLMSIS version number. Possible values are  00 or  2.0 . Default is  2.0 . This parameter is optional. More details about this empirical model can be found [here](https: ccmc.gsfc.nasa.gov/models/NRLMSIS~00/), and [here](https: ccmc.gsfc.nasa.gov/models/NRLMSIS~2.0/). atmospheric_attenuation_correction (bool): Apply an atmospheric attenuation correction factor. Default is  False . atm_model_version (str): ATM model version number. Possible values are only '1.0' at this time, but will have additional possible values in the future. This parameter is optional. no_cache (bool): The UCalgary Space Remote Sensing API utilizes a caching layer for performing ATM calculations. If this variation of input parameters has been run before (and the cache is still valid), then it will not re-run the calculation. Instead it will return the cached results immediately. To disable the caching layer, set this parameter to  True . Default is  False . This parameter is optional. timeout (int): Represents how many seconds to wait for the API to send data before giving up. The default is 30 seconds, or the  api_timeout value in the super class'  pyucalgarysrs.PyUCalgarySRS object. This parameter is optional. Returns: An [ ATMInverseResult ](classes_inverse.html pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult) object containing the requested output data, among other values. Raises: pyucalgarysrs.exceptions.SRSAPIError: An API error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse",
"url":3,
"doc":"Classes for representing ATM inverse calculation requests and responses. All classes in this module are included at the top level of this library."
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags",
"url":3,
"doc":"Class to represent all output values included in an ATM inverse calculation. ATM calculations are performed in a way where you can toggle ON/OFF whichever pieces of information you do or don't want. This improves efficiency of the calculation routine resulting in faster queries. By default, all output flags are set to False. There exist several helper methods to toggle all to True or toggle all to False. See the below Methods section for details. Details about each output value can be found in the documentation for the [ ATMInverseResult ](classes_inverse.html pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult) object."
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.energy_flux",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.characteristic_energy",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.oxygen_correction_factor",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.height_integrated_rayleighs_4278",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.height_integrated_rayleighs_5577",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.height_integrated_rayleighs_6300",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.height_integrated_rayleighs_8446",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.altitudes",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.emission_4278",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.emission_5577",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.emission_6300",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.emission_8446",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_electron_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_o2plus_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_oplus_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_noplus_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_ionisation_rate",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_electron_temperature",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_ion_temperature",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_pederson_conductivity",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.plasma_hall_conductivity",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.neutral_o2_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.neutral_o_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.neutral_n2_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.neutral_n_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.neutral_temperature",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.set_all_true",
"url":3,
"doc":"Sets all flags to  True .",
"func":1
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseOutputFlags.set_all_false",
"url":3,
"doc":"Sets all flags to  False .",
"func":1
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest",
"url":3,
"doc":"Class that represents the UCalgary Space Remote Sensing API request when performing an ATM inverse calculation. This object is included in any [ ATMInverseResultRequestInfo ](classes_inverse.html pyucalgarysrs.models.atm.classes_inverse.ATMInverseResultRequestInfo) and [ ATMInverseResult ](classes_inverse.html pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult) objects."
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.atm_model_version",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.timestamp",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.geodetic_latitude",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.geodetic_longitude",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.intensity_4278",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.intensity_5577",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.intensity_6300",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.intensity_8446",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.precipitation_flux_spectral_type",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.nrlmsis_model_version",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.atmospheric_attenuation_correction",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.output",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseRequest.no_cache",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams",
"url":3,
"doc":"Class representing a forward calculation done under-the-hood of an inverse calculation. Depending on the inversion request parameters, a further forward calculation may be performed by the API. This variable contains the details of any such calculation."
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.maxwellian_energy_flux",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.gaussian_energy_flux",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.maxwellian_characteristic_energy",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.gaussian_peak_energy",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.gaussian_spectral_width",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.nrlmsis_model_version",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.oxygen_correction_factor",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.timescale_auroral",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseForwardParams.timescale_transport",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResultRequestInfo",
"url":3,
"doc":"Class containing details about interacting with the UCalgary Space Remote Sensing API when performing an ATM inverse calculation. It contains the API request itself, and other information returned by the API. An instance of this is included in any [ ATMInverseResult ](classes_inverse.html pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult) object. Attributes: request (ATMInverseRequest): Instance of class that represents the lower-level API request when performing an ATM inverse calculation. calculation_duration_ms (float): Duration the the API spent performing the ATM inverse calculation. Represented in milliseconds. forward_params (ATMInverseForwardParams): Depending on the inversion request parameters, a further forward calculation may be performed under-the-hood. This variable contains the details of any such calculation."
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResultRequestInfo.request",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResultRequestInfo.calculation_duration_ms",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResultRequestInfo.forward_params",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult",
"url":3,
"doc":"Class containing all data from an ATM inverse calculation. This class also includes details about the input parameters to inversion calculation routine ( request_info ), along with all output data values. Based on the request's output flags, if flags were set to False then the values will be None types. If flags were set to True then the values will be their respective types (e.g., float, numpy ndarray). Attributes: request_info (ATMInverseResultRequestInfo): Information about the API request made to perform the ATM forward calculation. energy_flux (float): Derived energy flux in erg/cm2/s. characteristic_energy (float): Derived characteristic energy in EV. oxygen_correction_factor (float): Derived oxygen correction factor. height_integrated_rayleighs_4278 (float): Height-integrated Rayleighs value for the 427.8nm emission (blue). height_integrated_rayleighs_5577 (float): Height-integrated Rayleighs value for the 557.7nm emission (green). height_integrated_rayleighs_6300 (float): Height-integrated Rayleighs value for the 630.0nm emission(red). height_integrated_rayleighs_8446 (float): Height-integrated Rayleighs value for the 844.6nm emission (near infrared). altitudes (ndarray): A 1-dimensional numpy array for the altitudes in kilometers. emission_4278 (ndarray): A 1-dimensional numpy array for the 427.8nm volume emission rate (1/cm^3/s). emission_5577 (ndarray): A 1-dimensional numpy array for the 557.7nm volume emission rate (1/cm^3/s). emission_6300 (ndarray): A 1-dimensional numpy array for the 630.0nm volume emission rate (1/cm^3/s). emission_8446 (ndarray): A 1-dimensional numpy array for the 844.6nm volume emission rate (1/cm^3/s). plasma_electron_density (ndarray): A 1-dimensional numpy array for the plasma electron density (cm^-3). plasma_o2plus_density (ndarray): A 1-dimensional numpy array for the plasma O2+ density (cm^-3). plasma_noplus_density (ndarray): A 1-dimensional numpy array for the plasma NO+ density (cm^-3). plasma_oplus_density (ndarray): A 1-dimensional numpy array for the plasma O+ density (cm^-3). plasma_ionisation_rate (ndarray): A 1-dimensional numpy array for the plasma ionisation rate (1/cm^3/s). plasma_electron_temperature (ndarray): A 1-dimensional numpy array for the plasma electron temperature (Kelvin). plasma_ion_temperature (ndarray): A 1-dimensional numpy array for the plasma ion temperature (Kelvin). plasma_pederson_conductivity (ndarray): A 1-dimensional numpy array for the Peterson plasma conductivity (S/m). plasma_hall_conductivity (ndarray): A 1-dimensional numpy array for the hall plasma conductivity (S/m). neutral_o2_density (ndarray): A 1-dimensional numpy array for the neutral O2 density (cm^-3). neutral_o_density (ndarray): A 1-dimensional numpy array for the neutral O density (cm^-3). neutral_n2_density (ndarray): A 1-dimensional numpy array for the neutral N2 density (cm^-3). neutral_n_density (ndarray): A 1-dimensional numpy array for the neutral N density (cm^-3). neutral_temperature (ndarray): A 1-dimensional numpy array for the neutral temperature (Kelvin)."
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.request_info",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.energy_flux",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.characteristic_energy",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.oxygen_correction_factor",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.height_integrated_rayleighs_4278",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.height_integrated_rayleighs_5577",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.height_integrated_rayleighs_6300",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.height_integrated_rayleighs_8446",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.altitudes",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.emission_4278",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.emission_5577",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.emission_6300",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.emission_8446",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_electron_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_o2plus_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_noplus_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_oplus_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_ionisation_rate",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_electron_temperature",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_ion_temperature",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_pederson_conductivity",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.plasma_hall_conductivity",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.neutral_o2_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.neutral_o_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.neutral_n2_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.neutral_n_density",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.neutral_temperature",
"url":3,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_inverse.ATMInverseResult.pretty_print",
"url":3,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward",
"url":4,
"doc":"Classes for representing ATM forward calculation requests and responses. All classes in this module are included at the top level of this library."
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags",
"url":4,
"doc":"Class to represent all output values included in an ATM forward calculation. ATM calculations are performed in a way where you can toggle ON/OFF whichever pieces of information you do or don't want. This improves efficiency of the calculation routine resulting in faster queries. By default, all output flags are set to False. There exist several helper methods to toggle all to True, toggle all to False, or toggle only height-integrated Rayleighs flags to True. See the below Methods section for details. Details about each output value can be found in the documentation for the [ ATMForwardResult ](classes_forward.html pyucalgarysrs.models.atm.classes_forward.ATMForwardResult) object."
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.height_integrated_rayleighs_4278",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.height_integrated_rayleighs_5577",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.height_integrated_rayleighs_6300",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.height_integrated_rayleighs_8446",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.height_integrated_rayleighs_lbh",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.height_integrated_rayleighs_1304",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.height_integrated_rayleighs_1356",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.altitudes",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.emission_4278",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.emission_5577",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.emission_6300",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.emission_8446",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.emission_lbh",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.emission_1304",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.emission_1356",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_electron_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_o2plus_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_oplus_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_noplus_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_ionisation_rate",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_electron_temperature",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_ion_temperature",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_pederson_conductivity",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.plasma_hall_conductivity",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.neutral_o2_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.neutral_o_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.neutral_n2_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.neutral_n_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.neutral_temperature",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.set_all_true",
"url":4,
"doc":"Sets all flags to  True .",
"func":1
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.set_all_false",
"url":4,
"doc":"Sets all flags to  False .",
"func":1
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardOutputFlags.enable_only_height_integrated_rayleighs",
"url":4,
"doc":"Sets only height-integrated Rayleighs values to  True .",
"func":1
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest",
"url":4,
"doc":"Class that represents the UCalgary Space Remote Sensing API request when performing an ATM forward calculation. This object is included in any [ ATMForwardResultRequestInfo ](classes_forward.html pyucalgarysrs.models.atm.classes_forward.ATMForwardResultRequestInfo) and [ ATMForwardResult ](classes_forward.html pyucalgarysrs.models.atm.classes_forward.ATMForwardResult) objects."
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.atm_model_version",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.timestamp",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.geodetic_latitude",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.geodetic_longitude",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.maxwellian_energy_flux",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.gaussian_energy_flux",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.maxwellian_characteristic_energy",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.gaussian_peak_energy",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.gaussian_spectral_width",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.nrlmsis_model_version",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.oxygen_correction_factor",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.timescale_auroral",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.timescale_transport",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.custom_spectrum",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.output",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardRequest.no_cache",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResultRequestInfo",
"url":4,
"doc":"Class containing details about interacting with the UCalgary Space Remote Sensing API when performing an ATM forward calculation. It contains the API request itself, and other information returned by the API. An instance of this is included in any [ ATMForwardResult ](classes_forward.html pyucalgarysrs.models.atm.classes_forward.ATMForwardResult) object. Attributes: request (ATMForwardRequest): Instance of class that represents the lower-level API request when performing an ATM forward calculation. calculation_duration_ms (float): Duration the the API spent performing the ATM forward calculation. Represented in milliseconds."
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResultRequestInfo.request",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResultRequestInfo.calculation_duration_ms",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult",
"url":4,
"doc":"Class containing all data from an ATM forward calculation. This class also includes details about the input parameters to the forward calculation routine ( request_info ), along with all output data values. Based on the request's output flags, if flags were set to False then the values will be None types. If flags were set to True then the values will be their respective types (e.g., float, numpy ndarray). Attributes: request_info (ATMForwardResultRequestInfo): Information about the API request made to perform the ATM forward calculation. height_integrated_rayleighs_4278 (float): Height-integrated Rayleighs value for the 427.8nm emission (blue). height_integrated_rayleighs_5577 (float): Height-integrated Rayleighs value for the 557.7nm emission (green). height_integrated_rayleighs_6300 (float): Height-integrated Rayleighs value for the 630.0nm emission(red). height_integrated_rayleighs_8446 (float): Height-integrated Rayleighs value for the 844.6nm emission (near infrared). height_integrated_rayleighs_lbh (float): Height-integrated Rayleighs value for the Lyman-Birge-Hopfield emission. height_integrated_rayleighs_1304 (float): Height-integrated Rayleighs value for the 130.4nm emission. height_integrated_rayleighs_1356 (float): Height-integrated Rayleighs value for the 135.6nm emission. altitudes (ndarray): A 1-dimensional numpy array for the altitudes in kilometers. emission_4278 (ndarray): A 1-dimensional numpy array for the 427.8nm volume emission rate (1/cm^3/s). emission_5577 (ndarray): A 1-dimensional numpy array for the 557.7nm volume emission rate (1/cm^3/s). emission_6300 (ndarray): A 1-dimensional numpy array for the 630.0nm volume emission rate (1/cm^3/s). emission_8446 (ndarray): A 1-dimensional numpy array for the 844.6nm volume emission rate (1/cm^3/s). emission_lbh (ndarray): A 1-dimensional numpy array for the Lyman-Birge-Hopfield volume emission rate (1/cm^3/s). emission_1304 (ndarray): A 1-dimensional numpy array for the 130.4nm volume emission rate (1/cm^3/s). emission_1356 (ndarray): A 1-dimensional numpy array for the 135.6nm volume emission rate (1/cm^3/s). plasma_electron_density (ndarray): A 1-dimensional numpy array for the plasma electron density (cm^-3). plasma_o2plus_density (ndarray): A 1-dimensional numpy array for the plasma O2+ density (cm^-3). plasma_noplus_density (ndarray): A 1-dimensional numpy array for the plasma NO+ density (cm^-3). plasma_oplus_density (ndarray): A 1-dimensional numpy array for the plasma O+ density (cm^-3). plasma_ionisation_rate (ndarray): A 1-dimensional numpy array for the plasma ionisation rate (1/cm^3/s). plasma_electron_temperature (ndarray): A 1-dimensional numpy array for the plasma electron temperature (Kelvin). plasma_ion_temperature (ndarray): A 1-dimensional numpy array for the plasma ion temperature (Kelvin). plasma_pederson_conductivity (ndarray): A 1-dimensional numpy array for the Peterson plasma conductivity (S/m). plasma_hall_conductivity (ndarray): A 1-dimensional numpy array for the hall plasma conductivity (S/m). neutral_o2_density (ndarray): A 1-dimensional numpy array for the neutral O2 density (cm^-3). neutral_o_density (ndarray): A 1-dimensional numpy array for the neutral O density (cm^-3). neutral_n2_density (ndarray): A 1-dimensional numpy array for the neutral N2 density (cm^-3). neutral_n_density (ndarray): A 1-dimensional numpy array for the neutral N density (cm^-3). neutral_temperature (ndarray): A 1-dimensional numpy array for the neutral temperature (Kelvin)."
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.request_info",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.height_integrated_rayleighs_4278",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.height_integrated_rayleighs_5577",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.height_integrated_rayleighs_6300",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.height_integrated_rayleighs_8446",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.height_integrated_rayleighs_lbh",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.height_integrated_rayleighs_1304",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.height_integrated_rayleighs_1356",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.altitudes",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.emission_4278",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.emission_5577",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.emission_6300",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.emission_8446",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.emission_lbh",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.emission_1304",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.emission_1356",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_electron_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_o2plus_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_noplus_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_oplus_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_ionisation_rate",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_electron_temperature",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_ion_temperature",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_pederson_conductivity",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.plasma_hall_conductivity",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.neutral_o2_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.neutral_o_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.neutral_n2_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.neutral_n_density",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.neutral_temperature",
"url":4,
"doc":""
},
{
"ref":"pyucalgarysrs.models.atm.classes_forward.ATMForwardResult.pretty_print",
"url":4,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data",
"url":5,
"doc":"Provides capabilities for downloading and reading data from the UCalgary Space Remote Sensing Open Data Platform."
},
{
"ref":"pyucalgarysrs.data.DataManager",
"url":5,
"doc":"The DataManager object is initialized within every PyUCalgarySRS object. It acts as a way to access the submodules and carry over configuration information in the super class."
},
{
"ref":"pyucalgarysrs.data.DataManager.readers",
"url":5,
"doc":"Access to the  read submodule from within a PyUCalgarySRS object."
},
{
"ref":"pyucalgarysrs.data.DataManager.list_datasets",
"url":5,
"doc":"List available datasets Args: name (str): Supply a name used for filtering. If that name is found in the available dataset names received from the API, it will be included in the results. This parameter is optional. level (str): Supply a level string for filtering. Valid strings are: L0, L1, L1A, L2, L3. This parameter is optional. timeout (int): Represents how many seconds to wait for the API to send data before giving up. The default is 3 seconds, or the  api_timeout value in the super class'  pyucalgarysrs.PyUCalgarySRS object. This parameter is optional. supported_library (Literal): The supported library to filter based on. This is used to help with showing only the datasets that we want shown in the one-level-up libraries, such as PyAuroraX and PyUCRio. Returns: A list of [ Dataset ](classes.html pyucalgarysrs.data.classes.Dataset) objects. Raises: pyucalgarysrs.exceptions.SRSAPIError: An API error was encountered.",
"func":1
},
{
"ref":"pyucalgarysrs.data.DataManager.get_dataset",
"url":5,
"doc":"Get a specific dataset Args: name (str): The dataset name to get. Names are case insensitive. timeout (int): Represents how many seconds to wait for the API to send data before giving up. The default is 3 seconds, or the  api_timeout value in the super class'  pyucalgarysrs.PyUCalgarySRS object. This parameter is optional. Returns: A list of [ Dataset ](classes.html pyucalgarysrs.data.classes.Dataset) objects. Raises: pyucalgarysrs.exceptions.SRSAPIError: An API error was encountered.",
"func":1
},
{
"ref":"pyucalgarysrs.data.DataManager.list_observatories",
"url":5,
"doc":"List information about observatories Args: instrument_array (str): The instrument array to list observatories for. Valid values are: themis_asi, rego, trex_rgb, trex_nir, trex_blue, trex_spectrograph, norstar_riometer, and swan_hsr. uid (str): Supply a observatory unique identifier used for filtering (usually 4-letter site code). If that UID is found in the available observatories received from the API, it will be included in the results. This parameter is optional. timeout (int): Represents how many seconds to wait for the API to send data before giving up. The default is 30 seconds, or the  api_timeout value in the super class'  pyucalgarysrs.PyUCalgarySRS object. This parameter is optional. Returns: A list of [ Observatory ](classes.html pyucalgarysrs.data.classes.Observatory) objects. Raises: pyucalgarysrs.exceptions.SRSAPIError: An API error was encountered.",
"func":1
},
{
"ref":"pyucalgarysrs.data.DataManager.list_supported_read_datasets",
"url":5,
"doc":"List the datasets which have file reading capabilities supported. Returns: A list of the dataset names with file reading support.",
"func":1
},
{
"ref":"pyucalgarysrs.data.DataManager.is_read_supported",
"url":5,
"doc":"Check if a given dataset has file reading support. Not all datasets available in the UCalgary Space Remote Sensing Open Data Platform have special readfile routines in this library. This is because some datasets are in basic formats such as JPG or PNG, so unique functions aren't necessary. We leave it up to the user to open these basic files in whichever way they prefer. Use the  list_supported_read_datasets() function to see all datasets that have special file reading functionality in this library. Args: dataset_name (str): The dataset name to check if file reading is supported. This parameter is required. Returns: Boolean indicating if file reading is supported.",
"func":1
},
{
"ref":"pyucalgarysrs.data.DataManager.download",
"url":5,
"doc":"Download data from the UCalgary Space Remote Sensing Open Data Platform. The parameters  dataset_name ,  start , and  end are required. All other parameters are optional. Note that usage of the site and device UID filters applies differently to some datasets. For example, both fields can be used for most raw and keogram data, but only site UID can be used for skymap datasets, and only device UID can be used for calibration datasets. If fields are specified during a call in which site or device UID is not used, a UserWarning is display to provide the user with feedback about this detail. Args: dataset_name (str): Name of the dataset to download data for. Use the  list_datasets() function to get the possible values for this parameter. One example is \"THEMIS_ASI_RAW\". Note that dataset names are case sensitive. This parameter is required. start (datetime.datetime): Start timestamp to use (inclusive), expected to be in UTC. Any timezone data will be ignored. This parameter is required. end (datetime.datetime): End timestamp to use (inclusive), expected to be in UTC. Any timezone data will be ignored. This parameter is required. site_uid (str): The site UID to filter for. If specified, data will be downloaded for only the site matching the given value. If excluded, data for all available sites will be downloaded. An example value could be 'atha', meaning all data from the Athabasca observatory will be downloaded for the given dataset name, start, and end times. This parameter is optional. device_uid (str): The device UID to filter for. If specified, data will be downloaded for only the device matching the given value. If excluded, data for all available devices will be downloaded. An example value could be 'themis02', meaning all data matching that device will be downloaded for the given dataset name, start, and end times. This parameter is optional. n_parallel (int): Number of data files to download in parallel. Default value is 5. Adjust as needed for your internet connection. This parameter is optional. overwrite (bool): By default, data will not be re-downloaded if it already exists locally. Use the  overwrite parameter to force re-downloading. Default is  False . This parameter is optional. progress_bar_disable (bool): Disable the progress bar. Default is  False . This parameter is optional. progress_bar_ncols (int): Number of columns for the progress bar (straight passthrough of the  ncols parameter in a tqdm progress bar). This parameter is optional. See Notes section below for further information. progress_bar_ascii (str): ASCII value to use when constructing the visual aspect of the progress bar (straight passthrough of the  ascii parameter in a tqdm progress bar). This parameter is optional. See Notes section below for further details. progress_bar_desc (str): Description value to use when constructing the visual aspect of the progress bar (straight passthrough of the  desc parameter in a tqdm progress bar). This parameter is optional. See notes section below for further details. timeout (int): Represents how many seconds to wait for the API to send data before giving up. The default is 30 seconds, or the  api_timeout value in the super class'  pyucalgarysrs.PyUCalgarySRS object. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.FileDownloadResult object containing details about what data files were downloaded. Raises: ValueError: if no files are available for download pyucalgarysrs.exceptions.SRSDownloadError: an error was encountered while downloading a specific file pyucalgarysrs.exceptions.SRSAPIError: an API error was encountered Notes:     The  progress_bar_ parameters can be used to enable/disable/adjust the progress bar. Excluding the  progress_bar_disable parameter, all others are straight pass-throughs to the tqdm progress bar function. The  progress_bar_ncols parameter allows for adjusting the width. The  progress_bar_ascii parameter allows for adjusting the appearance of the progress bar. And the  progress_bar_desc parameter allows for adjusting the description at the beginning of the progress bar. Further details can be found on the [tqdm documentation](https: tqdm.github.io/docs/tqdm/ tqdm-objects). Data downloading will use the  download_data_root_path variable within the super class' object ([ PyUCalgarySRS ]( /index.html pyucalgarysrs.PyUCalgarySRS to determine where to save data to. If you'd like to change this path to somewhere else you can change that variable before your download() call, like so:   import pyucalgarysrs srs = pyucalgarysrs.PyUCalgarySRS() srs.data_download_root_path = \"some_new_path\" srs.data.download(dataset_name, start, end)  ",
"func":1
},
{
"ref":"pyucalgarysrs.data.DataManager.download_using_urls",
"url":5,
"doc":"Download data from the UCalgary Space Remote Sensing Open Data Platform using a FileListingResponse object. This would be used in cases where more customization is needed than the generic  download() function. One example of using this function would start by using  get_urls() to retrieve the list of URLs available for download, then further process this list to fewer files based on some other requirement (ie. time down-sampling such as one file per hour). Lastly using this function to download the new custom set URLs. Args: file_listing_response (FileListingResponse): A  pyucalgarysrs.data.classes.FileListingResponse object returned from a  get_urls() call, which contains a list of URLs to download for a specific dataset. This parameter is required. n_parallel (int): Number of data files to download in parallel. Default value is 5. Adjust as needed for your internet connection. This parameter is optional. overwrite (bool): By default, data will not be re-downloaded if it already exists locally. Use the  overwrite parameter to force re-downloading. Default is  False . This parameter is optional. progress_bar_disable (bool): Disable the progress bar. Default is  False . This parameter is optional. progress_bar_ncols (int): Number of columns for the progress bar (straight passthrough of the  ncols parameter in a tqdm progress bar). This parameter is optional. See Notes section below for further information. progress_bar_ascii (str): ASCII value to use when constructing the visual aspect of the progress bar (straight passthrough of the  ascii parameter in a tqdm progress bar). This parameter is optional. See Notes section below for further details. progress_bar_desc (str): Description value to use when constructing the visual aspect of the progress bar (straight passthrough of the  desc parameter in a tqdm progress bar). This parameter is optional. See notes section below for further details. timeout (int): Represents how many seconds to wait for the API to send data before giving up. The default is 30 seconds, or the  api_timeout value in the super class'  pyucalgarysrs.PyUCalgarySRS object. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.FileDownloadResult object containing details about what data files were downloaded. Raises: pyucalgarysrs.exceptions.SRSDownloadError: an error was encountered while downloading a specific file pyucalgarysrs.exceptions.SRSAPIError: an API error was encountered Notes:     The  progress_bar_ parameters can be used to enable/disable/adjust the progress bar. Excluding the  progress_bar_disable parameter, all others are straight pass-throughs to the tqdm progress bar function. The  progress_bar_ncols parameter allows for adjusting the width. The  progress_bar_ascii parameter allows for adjusting the appearance of the progress bar. And the  progress_bar_desc parameter allows for adjusting the description at the beginning of the progress bar. Further details can be found on the [tqdm documentation](https: tqdm.github.io/docs/tqdm/ tqdm-objects). Data downloading will use the  download_data_root_path variable within the super class' object ([ PyUCalgarySRS ]( /pyucalgarysrs.html to determine where to save data to. If you'd like to change this path to somewhere else you can change that variable before your download() call, like so:   import pyucalgarysrs srs = pyucalgarysrs.PyUCalgarySRS() srs.data_download_root_path = \"some_new_path\" srs.data.download(dataset_name, start, end)  ",
"func":1
},
{
"ref":"pyucalgarysrs.data.DataManager.get_urls",
"url":5,
"doc":"Get URLs of data files The parameters  dataset_name ,  start , and  end are required. All other parameters are optional. Note that usage of the site and device UID filters applies differently to some datasets. For example, both fields can be used for most raw and keogram data, but only site UID can be used for skymap datasets, and only device UID can be used for calibration datasets. If fields are specified during a call in which site or device UID is not used, a UserWarning is display to provide the user with feedback about this detail. Args: dataset_name (str): Name of the dataset to download data for. Use the  list_datasets() function to get the possible values for this parameter. One example is \"THEMIS_ASI_RAW\". Note that dataset names are case sensitive. This parameter is required. start (datetime.datetime): Start timestamp to use (inclusive), expected to be in UTC. Any timezone data will be ignored. This parameter is required. end (datetime.datetime): End timestamp to use (inclusive), expected to be in UTC. Any timezone data will be ignored. This parameter is required. site_uid (str): The site UID to filter for. If specified, data will be downloaded for only the site matching the given value. If excluded, data for all available sites will be downloaded. An example value could be 'atha', meaning all data from the Athabasca observatory will be downloaded for the given dataset name, start, and end times. This parameter is optional. device_uid (str): The device UID to filter for. If specified, data will be downloaded for only the device matching the given value. If excluded, data for all available devices will be downloaded. An example value could be 'themis02', meaning all data matching that device will be downloaded for the given dataset name, start, and end times. This parameter is optional. timeout (int): Represents how many seconds to wait for the API to send data before giving up. The default is 30 seconds, or the  api_timeout value in the super class'  pyucalgarysrs.PyUCalgarySRS object. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.FileListingResponse object containing a list of the available URLS, among other values. Raises: pyucalgarysrs.exceptions.SRSAPIError: an API error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.DataManager.read",
"url":5,
"doc":"Read in data files for a given dataset. Note that only one type of dataset's data should be read in using a single call. Args: dataset (Dataset): The dataset object for which the files are associated with. This parameter is required. file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSUnsupportedReadError: an unsupported dataset was used when trying to read files. pyucalgarysrs.exceptions.SRSError: a generic read error was encountered Notes:     - For users who are familiar with the themis-imager-readfile and trex-imager-readfile libraries, the read function provides a near-identical usage. Further improvements have been integrated, and those libraries are anticipated to be deprecated at some point in the future.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes",
"url":6,
"doc":"Classes for representing data download and reading operations. All classes in this module are included at the top level of this library."
},
{
"ref":"pyucalgarysrs.data.classes.Dataset",
"url":6,
"doc":"A dataset available from the UCalgary Space Remote Sensing API, with possibly support for downloading and/or reading. Attributes: name (str): Dataset name short_description (str): A short description about the dataset long_description (str): A longer description about the dataset data_tree_url (str): The data tree URL prefix. Used for saving data locally with a similar data tree structure compared to the UCalgary Open Data archive. file_listing_supported (bool): Flag indicating if file listing (downloading) is supported for this dataset. file_reading_supported (bool): Flag indicating if file reading is supported for this dataset. file_time_resolution (str): Time resolution of the files for this dataset, represented as a string. Possible values are: 1min, 1hr, 1day, not_applicable. level (str): Dataset level as per L0/L1/L2/etc standards. doi (str): Dataset DOI unique identifier. doi_details (str): Further details about the DOI. citation (str): String to use when citing usage of the dataset. provider (str): Data provider. supported_libraries (List[str]): Libraries that support usage of this dataset."
},
{
"ref":"pyucalgarysrs.data.classes.Dataset.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.FileListingResponse",
"url":6,
"doc":"Representation of the file listing response from the UCalgary Space Remote Sensing API. Attributes: urls (List[str]): A list of URLs for available data files. path_prefix (str): The URL prefix, which is sed for saving data locally with a similar data tree structure compared to the UCalgary Open Data archive. count (int): The number of URLs available. dataset (Dataset): The  Dataset object for this data. total_bytes (int): The cumulative amount of bytes for the available URLs."
},
{
"ref":"pyucalgarysrs.data.classes.FileListingResponse.urls",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileListingResponse.path_prefix",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileListingResponse.count",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileListingResponse.dataset",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileListingResponse.total_bytes",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileListingResponse.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.FileDownloadResult",
"url":6,
"doc":"Representation of the results from a data download call. Attributes: filenames (List[str]): List of downloaded files, as absolute paths of their location on the local machine. count (int): Number of files downloaded total_bytes (int): Cumulative amount of bytes saved on the local machine. output_root_path (str): The root path of where the data was saved to on the local machine. dataset (Dataset): The  Dataset object for this data."
},
{
"ref":"pyucalgarysrs.data.classes.FileDownloadResult.filenames",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileDownloadResult.count",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileDownloadResult.total_bytes",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileDownloadResult.output_root_path",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileDownloadResult.dataset",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.FileDownloadResult.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.ProblematicFile",
"url":6,
"doc":"Representation about a file that had issues being read. Attributes: filename (str): Filename of the problematic file. error_message (str): Error message that was encountered while attempting to read the file. error_type (str): Error type encountered. Possible values are 'error' or 'warning'."
},
{
"ref":"pyucalgarysrs.data.classes.ProblematicFile.filename",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.ProblematicFile.error_message",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.ProblematicFile.error_type",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo",
"url":6,
"doc":"Representation of generation details for a specific skymap file. Attributes: author (str): Name of individual who created the skymap ccd_center (float): Center pixels of the CCD code_used (str): Program name for the code used to generate the skymap data_loc (str): Location of the data on the UCalgary data systems used during generation date_generated (datetime.datetime): Timestamp of when the skymap was generated date_time_used (datetime.datetime): Timestamp of what hour was used during generation img_flip (ndarray | None): Image flipping specifics optical_orientation (ndarray | None): Image orientation details optical_projection (ndarray | None): Image projection details pixel_aspect_ratio (float | None): Aspect ratio details valid_interval_start (datetime.datetime): Valid start time for this skymap valid_interval_stop (datetime.datetime): Valid end time for this skymap. If None, then end time is unbounded and valid up until the next newest skymap. bytscl_values (ndarray): Values used for bytescaling during skymap procedure"
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.author",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.ccd_center",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.code_used",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.data_loc",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.date_generated",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.date_time_used",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.img_flip",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.optical_orientation",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.optical_projection",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.pixel_aspect_ratio",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.valid_interval_start",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.valid_interval_stop",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.bytscl_values",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.SkymapGenerationInfo.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.Skymap",
"url":6,
"doc":"Representation for a skymap file. Attributes: filename (str): Filename for the skymap file, as an absolute path of its location on the local machine. project_uid (str): Project unique identifier site_uid (str): Site unique identifier imager_uid (str): Imager/device unique identifier site_map_latitude (float): Geodetic latitude of instrument site_map_longitude (float): Geodetic longitude of instrument site_map_altitude (float): Altitude of the instrument (in meters) full_elevation (ndarray): Elevation angle from horizon, for each image pixel (in degrees) full_azimuth (ndarray | None): Local azimuth angle from 0 degrees north, positive moving east (in degrees). None for TREx Spectrograph. full_map_altitude (ndarray): Altitudes that image coordinates are mapped to (in kilometers) full_map_latitude (ndarray): Geodetic latitudes of pixel corners, mapped to various altitudes (specified by  full_map_altitude ) full_map_longitude (ndarray): Geodetic longitudes of pixel corners, mapped to various altitudes (specified by  full_map_altitude ) generation_info (SkymapGenerationInfo): Metadata describing details about this skymap's generation process version (str): Version of the skymap dataset (Dataset): The  Dataset object for this data."
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.filename",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.project_uid",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.site_uid",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.imager_uid",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.site_map_latitude",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.site_map_longitude",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.site_map_altitude",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.full_elevation",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.full_azimuth",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.full_map_altitude",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.full_map_latitude",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.full_map_longitude",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.generation_info",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.version",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.Skymap.get_precalculated_altitudes",
"url":6,
"doc":"Get the altitudes that have been precalculated in this skymap. Units are kilometers.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.CalibrationGenerationInfo",
"url":6,
"doc":"Representation of generation details for a specific calibration file. Attributes: valid_interval_start (datetime.datetime): Valid start timestamp for this calibration file valid_interval_stop (datetime.datetime): Valid end time for this calibration file. If None, then end time is unbounded and valid up until the next newest calibration for this detector UID. author (str): Individual who generated the calibration file input_data_dir (str): Path on UCalgary data system to the raw calibration files skymap_filename (str): Path to skymap file used to assist with calibration process. If None, no skymap file was used."
},
{
"ref":"pyucalgarysrs.data.classes.CalibrationGenerationInfo.valid_interval_start",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.CalibrationGenerationInfo.valid_interval_stop",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.CalibrationGenerationInfo.author",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.CalibrationGenerationInfo.input_data_dir",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.CalibrationGenerationInfo.skymap_filename",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.CalibrationGenerationInfo.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.Calibration",
"url":6,
"doc":"Representation for a calibration file. Attributes: filename (str): Filename for the calibration file, as an absolute path of its location on the local machine. detector_uid (str): Detector/imager/camera unique identifier version (str): Version number of the calibration file generation_info (CalibrationGenerationInfo): Metadata describing details about this calibration's generation process rayleighs_perdn_persecond (float): Calibrated value for Rayleighs per data number per second (R/dn/s). This value will be None if a flatfield calibration file was read instead of a rayleighs calibration file. flat_field_multiplier (ndarray): Calibrated flat field array. This value will be None if a rayleighs calibration file was read instead of a flatfield calibration file. dataset (Dataset): The  Dataset object for this data."
},
{
"ref":"pyucalgarysrs.data.classes.Calibration.filename",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Calibration.detector_uid",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Calibration.version",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Calibration.generation_info",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Calibration.rayleighs_perdn_persecond",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Calibration.flat_field_multiplier",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Calibration.dataset",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Calibration.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.Data",
"url":6,
"doc":"Representation of the data read in from a  read call. Attributes: data (Any): The loaded data. This can be one of the following types: ndarray, List[Skymap], List[Calibration]. timestamp (List[datetime.datetime]): List of timestamps for the read in data. metadata (List[Dict]): List of dictionaries containing metadata specific to each timestamp/image/record. problematic_files (List[ProblematicFiles]): A list detailing any files that encountered issues during reading. calibrated_data (Any): A calibrated version of the data. Populated and utilized by data analysis libraries. Has a  None value until calibrated data is inserted manually. dataset (Dataset): The  Dataset object for this data."
},
{
"ref":"pyucalgarysrs.data.classes.Data.data",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Data.timestamp",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Data.metadata",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Data.problematic_files",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Data.calibrated_data",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Data.dataset",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.Data.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.Observatory",
"url":6,
"doc":"Representation for an observatory. Attributes: uid (str): The 4-letter unique identifier (traditionally referred to as the site UID) full_name (str): Full location string for the observatory geodetic_latitude (float): Geodetic latitude for the observatory, in decimal format (-90 to 90) geodetic_longitude (float): Geodetic longitude for the observatory, in decimal format (-180 to 180) provider (str): Data provider"
},
{
"ref":"pyucalgarysrs.data.classes.Observatory.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.GridSourceInfoData",
"url":6,
"doc":"Representation for a grid file's data specific to the type of grid file Args: confidence (ndarray): A confidence rating"
},
{
"ref":"pyucalgarysrs.data.classes.GridSourceInfoData.confidence",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.GridSourceInfoData.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.GridData",
"url":6,
"doc":"Representation for a grid file's data. Attributes: grid (ndarray): Primary data set, gridded images fill_value (float): Value used to represent NaN/NULL. Used for subsequent plotting of grid data. source_info (GridSourceInfoData): Special data attributes specific to this particular grid file"
},
{
"ref":"pyucalgarysrs.data.classes.GridData.grid",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.GridData.fill_value",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.GridData.source_info",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.GridData.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.RiometerData",
"url":6,
"doc":"Representation for riometer data. Attributes: timestamp (ndarray): Timestamp data, a numpy array of datetime objects raw_signal (ndarray): Raw signal data, a numpy array of floats absorption (ndarray): Absorption data, a numpy array of float. Note that this is only populated for K2 data."
},
{
"ref":"pyucalgarysrs.data.classes.RiometerData.timestamp",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.RiometerData.raw_signal",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.RiometerData.absorption",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.RiometerData.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.classes.HSRData",
"url":6,
"doc":"Representation for SWAN Hyper Spectral Riometer (HSR) data. Attributes: timestamp (ndarray): Timestamp data, a numpy array of datetime objects raw_power (ndarray): Raw power data, a numpy array of floats band_central_frequency (List[str]): Band central frequencies, a list of strings band_passband (List[str]): Band passbands, a list of strings absorption (ndarray): Absorption data, a numpy array of float. Note this is only populated for K2 data."
},
{
"ref":"pyucalgarysrs.data.classes.HSRData.timestamp",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.HSRData.raw_power",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.HSRData.band_central_frequency",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.HSRData.band_passband",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.HSRData.absorption",
"url":6,
"doc":""
},
{
"ref":"pyucalgarysrs.data.classes.HSRData.pretty_print",
"url":6,
"doc":"A special print output for this class.",
"func":1
},
{
"ref":"pyucalgarysrs.data.read",
"url":7,
"doc":"Functions for reading data for specific datasets."
},
{
"ref":"pyucalgarysrs.data.read.ReadManager",
"url":7,
"doc":"The ReadManager object is initialized within every PyUCalgarySRS.data object. It acts as a way to access the submodules and carry over configuration information in the super class."
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.list_supported_datasets",
"url":7,
"doc":"List the datasets which have file reading capabilities supported. Returns: A list of the dataset names with file reading support.",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.is_supported",
"url":7,
"doc":"Check if a given dataset has file reading support. Not all datasets available in the UCalgary Space Remote Sensing Open Data Platform have special readfile routines in this library. This is because some datasets are in basic formats such as JPG or PNG, so unique functions aren't necessary. We leave it up to the user to open these basic files in whichever way they prefer. Use the  list_supported_read_datasets() function to see all datasets that have special file reading functionality in this library. Args: dataset_name (str): The dataset name to check if file reading is supported. This parameter is required. Returns: Boolean indicating if file reading is supported.",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read",
"url":7,
"doc":"Read in data files for a given dataset. Note that only one type of dataset's data should be read in using a single call. Args: dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is required. file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). Note that this parameter is only supported for several datasets (primarily ASI datasets). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSUnsupportedReadError: an unsupported dataset was used when trying to read files. pyucalgarysrs.exceptions.SRSError: a generic read error was encountered Notes:     - For users who are familiar with the themis-imager-readfile and trex-imager-readfile libraries, the read function provides a near-identical usage. Further improvements have been integrated, and those libraries are anticipated to be deprecated at some point in the future.",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_themis",
"url":7,
"doc":"Read in THEMIS ASI raw data (stream0 full.pgm files). Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_rego",
"url":7,
"doc":"Read in REGO raw data (stream0 pgm files). Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_trex_nir",
"url":7,
"doc":"Read in TREx near-infrared (NIR) raw data (stream0 pgm files). Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_trex_blue",
"url":7,
"doc":"Read in TREx Blueline raw data (stream0 pgm files). Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_trex_rgb",
"url":7,
"doc":"Read in TREx RGB raw data (stream0 h5, stream0.burst png.tar, unstable stream0 and stream0.colour pgm and png ). Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_trex_spectrograph",
"url":7,
"doc":"Read in TREx Spectrograph raw data (stream0 pgm files). Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_skymap",
"url":7,
"doc":"Read in UCalgary skymap files. Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. quiet (bool): Do not print out errors while reading skymap files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Skymap object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_calibration",
"url":7,
"doc":"Read in UCalgary calibration files. Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. quiet (bool): Do not print out errors while reading calibration files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Calibration object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_grid",
"url":7,
"doc":"Read in grid files. Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. first_record (bool): Only read in the first record in each file. This is the same as the first_frame parameter in the themis-imager-readfile and trex-imager-readfile libraries, and is a read optimization if you only need one image per minute, as opposed to the full temporal resolution of data (e.g., 3sec cadence). This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_norstar_riometer",
"url":7,
"doc":"Read in NORSTAR Riometer ASCII data (K0 or K2 txt files). Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.data.read.ReadManager.read_swan_hsr",
"url":7,
"doc":"Read in SWAN Hyper Spectral Riometer (HSR) H5 data (K0 H5 files). Args: file_list (List[str], List[Path], str, Path): The files to read in. Absolute paths are recommended, but not technically necessary. This can be a single string for a file, or a list of strings to read in multiple files. This parameter is required. n_parallel (int): Number of data files to read in parallel using multiprocessing. Default value is 1. Adjust according to your computer's available resources. This parameter is optional. no_metadata (bool): Skip reading of metadata. This is a minor optimization if the metadata is not needed. Default is  False . This parameter is optional. start_time (datetime.datetime): The start timestamp to read data onwards from (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  end_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will assume the start time is the timestamp of the first record in the first file supplied (ie. beginning of the supplied data). This parameter is optional. end_time (datetime.datetime): The end timestamp to read data up to (inclusive). This can be utilized to read a portion of a data file, and could be paired with the  start_time parameter. This tends to be utilized for datasets that are hour or day-long files where it is possible to only read a smaller bit of that file. An example is the TREx Spectrograph processed data (1 hour files), or the riometer data (1 day files). If not supplied, it will it will assume the end time is the timestamp of the last record in the last file supplied (ie. end of the supplied data). This parameter is optional. quiet (bool): Do not print out errors while reading data files, if any are encountered. Any files that encounter errors will be, as usual, accessible via the  problematic_files attribute of the returned  pyucalgarysrs.data.classes.Data object. This parameter is optional. dataset (pyucalgarysrs.data.classes.Dataset): The dataset object for which the files are associated with. This parameter is optional. Returns: A  pyucalgarysrs.data.classes.Data object containing the data read in, among other values. Raises: pyucalgarysrs.exceptions.SRSError: a generic read error was encountered",
"func":1
},
{
"ref":"pyucalgarysrs.exceptions",
"url":8,
"doc":"The exceptions module contains unique exception classes utilized by PyUCalgarySRS. These exceptions can be used to help trap specific errors raised by the library. Note that all exceptions are imported at the root level of the library. They can be referenced using [ pyucalgarysrs.SRSError ](exceptions.html pyucalgarysrs.exceptions.SRSError) or  pyucalgarysrs.exceptions.SRSError ."
},
{
"ref":"pyucalgarysrs.exceptions.SRSError",
"url":8,
"doc":"Common base class for all non-exit exceptions."
},
{
"ref":"pyucalgarysrs.exceptions.SRSInitializationError",
"url":8,
"doc":"Error occurred during library initialization"
},
{
"ref":"pyucalgarysrs.exceptions.SRSPurgeError",
"url":8,
"doc":"Error occurred during purging of download or tar extraction working directory"
},
{
"ref":"pyucalgarysrs.exceptions.SRSAPIError",
"url":8,
"doc":"Error occurred during an API call"
},
{
"ref":"pyucalgarysrs.exceptions.SRSUnsupportedReadError",
"url":8,
"doc":"Unsupported dataset for read function"
},
{
"ref":"pyucalgarysrs.exceptions.SRSDownloadError",
"url":8,
"doc":"Error occurred during downloading of data"
}
]